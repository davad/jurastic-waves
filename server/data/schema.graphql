schema {
  query: Query
  mutation: Mutation
}

input AddStarRatingInput {
  id: ID!
  stars: Int!
  clientMutationId: String!
}

type AddStarRatingPayload {
  viewer: DinosaurList
  clientMutationId: String!
}

type Dinosaur {
  id: ID!
  name: String
  shortDescription: String
  longDescription: String
  imageUrl: String
  order: String
  superorder: String
  kingdom: String
  phylum: String
  genus: String
  geologicPeriod: String
  family: String
  suborder: String
  class: String
  stars: Int
}

type DinosaurConnection {
  pageInfo: PageInfo!
  edges: [DinosaurEdge]
}

type DinosaurEdge {
  node: Dinosaur
  cursor: String!
}

type DinosaurList implements Node {
  id: ID!
  dinosaurs(period: Int, kingdom: String, order: String, after: String, first: Int, before: String, last: Int): DinosaurConnection
  totalNumberOfDinosaurs: Int
}

type Mutation {
  addStars(input: AddStarRatingInput!): AddStarRatingPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  node(id: ID!): Node
  viewer: DinosaurList
  queryDinosaurList: [Dinosaur]
  queryDinosaur(id: ID!): Dinosaur
}
